// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
 url       = env("DATABASE_URL")
}

model User{
  id String @id @default(uuid())
  username String @unique
  email String @unique
   password String
   sessions Session[]
   followers Follow[] @relation("followers")
   following Follow[] @relation("following")
   comments Comment[]
   likes Like[]
   createdAt DateTime @default(now())
}
enum Provider {
  JITSI
  DAILY
  LIVEKIT
}
model Session {
  id           String    @id @default(uuid())
  slug         String    @unique
  title        String
  description  String?
  provider     Provider  @default(JITSI) 
  isLive       Boolean   @default(false)
  dailyRoomId  String?   
  joinUrl      String?
  startedAt    DateTime?
  endedAt      DateTime?
  recordingUrl String?
  creatorId    String
  creator      User      @relation(fields: [creatorId], references: [id],onDelete: Cascade)
  likes        Like[]
  comments     Comment[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  tags         String[]  @default([])
   @@index([creatorId])
  @@index([isLive])
  @@index([slug])
}
model Comment{
  id String @id @default(uuid())
  text String
  authorId String?
  author     User?    @relation(fields: [authorId], references: [id],onDelete: SetNull)
  sessionId String 
  session Session @relation(fields: [sessionId],references: [id],onDelete: Cascade)
  createdAt DateTime @default(now())
  @@index([sessionId])
  @@index([authorId])
}
model Like{
  id String @id @default(uuid())
  userId String
  user       User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  sessionId String 
  session Session @relation(fields: [sessionId],references: [id],onDelete: Cascade)
  createdAt DateTime @default(now())
  @@unique([userId, sessionId])
  @@index([userId])
  @@index([sessionId])
}
model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String

  follower    User     @relation("following", fields: [followerId], references: [id],onDelete: Cascade)
  following   User     @relation("followers", fields: [followingId], references: [id],onDelete: Cascade)

  createdAt   DateTime @default(now())
  @@unique([followerId, followingId])
}